// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgPackage.proto

#ifndef PROTOBUF_MsgPackage_2eproto__INCLUDED
#define PROTOBUF_MsgPackage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgPackage_2eproto();
void protobuf_AssignDesc_MsgPackage_2eproto();
void protobuf_ShutdownFile_MsgPackage_2eproto();

class MsgPackage;

// ===================================================================

class MsgPackage : public ::google::protobuf::Message {
 public:
  MsgPackage();
  virtual ~MsgPackage();

  MsgPackage(const MsgPackage& from);

  inline MsgPackage& operator=(const MsgPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPackage& default_instance();

  void Swap(MsgPackage* other);

  // implements Message ----------------------------------------------

  MsgPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPackage& from);
  void MergeFrom(const MsgPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_nSock_id = 1;
  inline bool has_m_nsock_id() const;
  inline void clear_m_nsock_id();
  static const int kMNSockIdFieldNumber = 1;
  inline ::google::protobuf::uint32 m_nsock_id() const;
  inline void set_m_nsock_id(::google::protobuf::uint32 value);

  // required int32 m_nIndex = 2;
  inline bool has_m_nindex() const;
  inline void clear_m_nindex();
  static const int kMNIndexFieldNumber = 2;
  inline ::google::protobuf::int32 m_nindex() const;
  inline void set_m_nindex(::google::protobuf::int32 value);

  // required string m_sUsername = 3;
  inline bool has_m_susername() const;
  inline void clear_m_susername();
  static const int kMSUsernameFieldNumber = 3;
  inline const ::std::string& m_susername() const;
  inline void set_m_susername(const ::std::string& value);
  inline void set_m_susername(const char* value);
  inline void set_m_susername(const char* value, size_t size);
  inline ::std::string* mutable_m_susername();
  inline ::std::string* release_m_susername();
  inline void set_allocated_m_susername(::std::string* m_susername);

  // required string m_sPassword = 4;
  inline bool has_m_spassword() const;
  inline void clear_m_spassword();
  static const int kMSPasswordFieldNumber = 4;
  inline const ::std::string& m_spassword() const;
  inline void set_m_spassword(const ::std::string& value);
  inline void set_m_spassword(const char* value);
  inline void set_m_spassword(const char* value, size_t size);
  inline ::std::string* mutable_m_spassword();
  inline ::std::string* release_m_spassword();
  inline void set_allocated_m_spassword(::std::string* m_spassword);

  // repeated string m_sTarget_user = 5;
  inline int m_starget_user_size() const;
  inline void clear_m_starget_user();
  static const int kMSTargetUserFieldNumber = 5;
  inline const ::std::string& m_starget_user(int index) const;
  inline ::std::string* mutable_m_starget_user(int index);
  inline void set_m_starget_user(int index, const ::std::string& value);
  inline void set_m_starget_user(int index, const char* value);
  inline void set_m_starget_user(int index, const char* value, size_t size);
  inline ::std::string* add_m_starget_user();
  inline void add_m_starget_user(const ::std::string& value);
  inline void add_m_starget_user(const char* value);
  inline void add_m_starget_user(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_starget_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_starget_user();

  // required string msg = 6;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 6;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required bool m_login_flag = 7;
  inline bool has_m_login_flag() const;
  inline void clear_m_login_flag();
  static const int kMLoginFlagFieldNumber = 7;
  inline bool m_login_flag() const;
  inline void set_m_login_flag(bool value);

  // required int32 m_login_stage = 8;
  inline bool has_m_login_stage() const;
  inline void clear_m_login_stage();
  static const int kMLoginStageFieldNumber = 8;
  inline ::google::protobuf::int32 m_login_stage() const;
  inline void set_m_login_stage(::google::protobuf::int32 value);

  // required int32 m_err_code = 9;
  inline bool has_m_err_code() const;
  inline void clear_m_err_code();
  static const int kMErrCodeFieldNumber = 9;
  inline ::google::protobuf::int32 m_err_code() const;
  inline void set_m_err_code(::google::protobuf::int32 value);

  // required bool m_update_user_flag = 10;
  inline bool has_m_update_user_flag() const;
  inline void clear_m_update_user_flag();
  static const int kMUpdateUserFlagFieldNumber = 10;
  inline bool m_update_user_flag() const;
  inline void set_m_update_user_flag(bool value);

  // required string handle = 11;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 11;
  inline const ::std::string& handle() const;
  inline void set_handle(const ::std::string& value);
  inline void set_handle(const char* value);
  inline void set_handle(const char* value, size_t size);
  inline ::std::string* mutable_handle();
  inline ::std::string* release_handle();
  inline void set_allocated_handle(::std::string* handle);

  // @@protoc_insertion_point(class_scope:MsgPackage)
 private:
  inline void set_has_m_nsock_id();
  inline void clear_has_m_nsock_id();
  inline void set_has_m_nindex();
  inline void clear_has_m_nindex();
  inline void set_has_m_susername();
  inline void clear_has_m_susername();
  inline void set_has_m_spassword();
  inline void clear_has_m_spassword();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_m_login_flag();
  inline void clear_has_m_login_flag();
  inline void set_has_m_login_stage();
  inline void clear_has_m_login_stage();
  inline void set_has_m_err_code();
  inline void clear_has_m_err_code();
  inline void set_has_m_update_user_flag();
  inline void clear_has_m_update_user_flag();
  inline void set_has_handle();
  inline void clear_has_handle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_nsock_id_;
  ::google::protobuf::int32 m_nindex_;
  ::std::string* m_susername_;
  ::std::string* m_spassword_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_starget_user_;
  ::std::string* msg_;
  ::google::protobuf::int32 m_login_stage_;
  bool m_login_flag_;
  bool m_update_user_flag_;
  ::std::string* handle_;
  ::google::protobuf::int32 m_err_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_MsgPackage_2eproto();
  friend void protobuf_AssignDesc_MsgPackage_2eproto();
  friend void protobuf_ShutdownFile_MsgPackage_2eproto();

  void InitAsDefaultInstance();
  static MsgPackage* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgPackage

// required uint32 m_nSock_id = 1;
inline bool MsgPackage::has_m_nsock_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPackage::set_has_m_nsock_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPackage::clear_has_m_nsock_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPackage::clear_m_nsock_id() {
  m_nsock_id_ = 0u;
  clear_has_m_nsock_id();
}
inline ::google::protobuf::uint32 MsgPackage::m_nsock_id() const {
  return m_nsock_id_;
}
inline void MsgPackage::set_m_nsock_id(::google::protobuf::uint32 value) {
  set_has_m_nsock_id();
  m_nsock_id_ = value;
}

// required int32 m_nIndex = 2;
inline bool MsgPackage::has_m_nindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPackage::set_has_m_nindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPackage::clear_has_m_nindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPackage::clear_m_nindex() {
  m_nindex_ = 0;
  clear_has_m_nindex();
}
inline ::google::protobuf::int32 MsgPackage::m_nindex() const {
  return m_nindex_;
}
inline void MsgPackage::set_m_nindex(::google::protobuf::int32 value) {
  set_has_m_nindex();
  m_nindex_ = value;
}

// required string m_sUsername = 3;
inline bool MsgPackage::has_m_susername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPackage::set_has_m_susername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPackage::clear_has_m_susername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPackage::clear_m_susername() {
  if (m_susername_ != &::google::protobuf::internal::kEmptyString) {
    m_susername_->clear();
  }
  clear_has_m_susername();
}
inline const ::std::string& MsgPackage::m_susername() const {
  return *m_susername_;
}
inline void MsgPackage::set_m_susername(const ::std::string& value) {
  set_has_m_susername();
  if (m_susername_ == &::google::protobuf::internal::kEmptyString) {
    m_susername_ = new ::std::string;
  }
  m_susername_->assign(value);
}
inline void MsgPackage::set_m_susername(const char* value) {
  set_has_m_susername();
  if (m_susername_ == &::google::protobuf::internal::kEmptyString) {
    m_susername_ = new ::std::string;
  }
  m_susername_->assign(value);
}
inline void MsgPackage::set_m_susername(const char* value, size_t size) {
  set_has_m_susername();
  if (m_susername_ == &::google::protobuf::internal::kEmptyString) {
    m_susername_ = new ::std::string;
  }
  m_susername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_m_susername() {
  set_has_m_susername();
  if (m_susername_ == &::google::protobuf::internal::kEmptyString) {
    m_susername_ = new ::std::string;
  }
  return m_susername_;
}
inline ::std::string* MsgPackage::release_m_susername() {
  clear_has_m_susername();
  if (m_susername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_susername_;
    m_susername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_m_susername(::std::string* m_susername) {
  if (m_susername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_susername_;
  }
  if (m_susername) {
    set_has_m_susername();
    m_susername_ = m_susername;
  } else {
    clear_has_m_susername();
    m_susername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_sPassword = 4;
inline bool MsgPackage::has_m_spassword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPackage::set_has_m_spassword() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPackage::clear_has_m_spassword() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPackage::clear_m_spassword() {
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    m_spassword_->clear();
  }
  clear_has_m_spassword();
}
inline const ::std::string& MsgPackage::m_spassword() const {
  return *m_spassword_;
}
inline void MsgPackage::set_m_spassword(const ::std::string& value) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(value);
}
inline void MsgPackage::set_m_spassword(const char* value) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(value);
}
inline void MsgPackage::set_m_spassword(const char* value, size_t size) {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  m_spassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_m_spassword() {
  set_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    m_spassword_ = new ::std::string;
  }
  return m_spassword_;
}
inline ::std::string* MsgPackage::release_m_spassword() {
  clear_has_m_spassword();
  if (m_spassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_spassword_;
    m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_m_spassword(::std::string* m_spassword) {
  if (m_spassword_ != &::google::protobuf::internal::kEmptyString) {
    delete m_spassword_;
  }
  if (m_spassword) {
    set_has_m_spassword();
    m_spassword_ = m_spassword;
  } else {
    clear_has_m_spassword();
    m_spassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string m_sTarget_user = 5;
inline int MsgPackage::m_starget_user_size() const {
  return m_starget_user_.size();
}
inline void MsgPackage::clear_m_starget_user() {
  m_starget_user_.Clear();
}
inline const ::std::string& MsgPackage::m_starget_user(int index) const {
  return m_starget_user_.Get(index);
}
inline ::std::string* MsgPackage::mutable_m_starget_user(int index) {
  return m_starget_user_.Mutable(index);
}
inline void MsgPackage::set_m_starget_user(int index, const ::std::string& value) {
  m_starget_user_.Mutable(index)->assign(value);
}
inline void MsgPackage::set_m_starget_user(int index, const char* value) {
  m_starget_user_.Mutable(index)->assign(value);
}
inline void MsgPackage::set_m_starget_user(int index, const char* value, size_t size) {
  m_starget_user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::add_m_starget_user() {
  return m_starget_user_.Add();
}
inline void MsgPackage::add_m_starget_user(const ::std::string& value) {
  m_starget_user_.Add()->assign(value);
}
inline void MsgPackage::add_m_starget_user(const char* value) {
  m_starget_user_.Add()->assign(value);
}
inline void MsgPackage::add_m_starget_user(const char* value, size_t size) {
  m_starget_user_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgPackage::m_starget_user() const {
  return m_starget_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgPackage::mutable_m_starget_user() {
  return &m_starget_user_;
}

// required string msg = 6;
inline bool MsgPackage::has_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgPackage::set_has_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgPackage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgPackage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgPackage::msg() const {
  return *msg_;
}
inline void MsgPackage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MsgPackage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MsgPackage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* MsgPackage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool m_login_flag = 7;
inline bool MsgPackage::has_m_login_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgPackage::set_has_m_login_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgPackage::clear_has_m_login_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgPackage::clear_m_login_flag() {
  m_login_flag_ = false;
  clear_has_m_login_flag();
}
inline bool MsgPackage::m_login_flag() const {
  return m_login_flag_;
}
inline void MsgPackage::set_m_login_flag(bool value) {
  set_has_m_login_flag();
  m_login_flag_ = value;
}

// required int32 m_login_stage = 8;
inline bool MsgPackage::has_m_login_stage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgPackage::set_has_m_login_stage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgPackage::clear_has_m_login_stage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgPackage::clear_m_login_stage() {
  m_login_stage_ = 0;
  clear_has_m_login_stage();
}
inline ::google::protobuf::int32 MsgPackage::m_login_stage() const {
  return m_login_stage_;
}
inline void MsgPackage::set_m_login_stage(::google::protobuf::int32 value) {
  set_has_m_login_stage();
  m_login_stage_ = value;
}

// required int32 m_err_code = 9;
inline bool MsgPackage::has_m_err_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgPackage::set_has_m_err_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgPackage::clear_has_m_err_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgPackage::clear_m_err_code() {
  m_err_code_ = 0;
  clear_has_m_err_code();
}
inline ::google::protobuf::int32 MsgPackage::m_err_code() const {
  return m_err_code_;
}
inline void MsgPackage::set_m_err_code(::google::protobuf::int32 value) {
  set_has_m_err_code();
  m_err_code_ = value;
}

// required bool m_update_user_flag = 10;
inline bool MsgPackage::has_m_update_user_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgPackage::set_has_m_update_user_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgPackage::clear_has_m_update_user_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgPackage::clear_m_update_user_flag() {
  m_update_user_flag_ = false;
  clear_has_m_update_user_flag();
}
inline bool MsgPackage::m_update_user_flag() const {
  return m_update_user_flag_;
}
inline void MsgPackage::set_m_update_user_flag(bool value) {
  set_has_m_update_user_flag();
  m_update_user_flag_ = value;
}

// required string handle = 11;
inline bool MsgPackage::has_handle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgPackage::set_has_handle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgPackage::clear_has_handle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgPackage::clear_handle() {
  if (handle_ != &::google::protobuf::internal::kEmptyString) {
    handle_->clear();
  }
  clear_has_handle();
}
inline const ::std::string& MsgPackage::handle() const {
  return *handle_;
}
inline void MsgPackage::set_handle(const ::std::string& value) {
  set_has_handle();
  if (handle_ == &::google::protobuf::internal::kEmptyString) {
    handle_ = new ::std::string;
  }
  handle_->assign(value);
}
inline void MsgPackage::set_handle(const char* value) {
  set_has_handle();
  if (handle_ == &::google::protobuf::internal::kEmptyString) {
    handle_ = new ::std::string;
  }
  handle_->assign(value);
}
inline void MsgPackage::set_handle(const char* value, size_t size) {
  set_has_handle();
  if (handle_ == &::google::protobuf::internal::kEmptyString) {
    handle_ = new ::std::string;
  }
  handle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_handle() {
  set_has_handle();
  if (handle_ == &::google::protobuf::internal::kEmptyString) {
    handle_ = new ::std::string;
  }
  return handle_;
}
inline ::std::string* MsgPackage::release_handle() {
  clear_has_handle();
  if (handle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = handle_;
    handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_handle(::std::string* handle) {
  if (handle_ != &::google::protobuf::internal::kEmptyString) {
    delete handle_;
  }
  if (handle) {
    set_has_handle();
    handle_ = handle;
  } else {
    clear_has_handle();
    handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgPackage_2eproto__INCLUDED
