/***************************************************************
 * Name:      netchatserverMain.cpp
 * Purpose:   Code for Application Frame
 * Author:    devilstan (devilstan@gmail.com)
 * Created:   2013-08-13
 * Copyright: devilstan ()
 * License:
 **************************************************************/

#include "wx_pch.h"
#include "netchatserverMain.h"
#include <wx/msgdlg.h>

//(*InternalHeaders(netchatserverFrame)
#include <wx/intl.h>
#include <wx/string.h>
//*)


//helper functions
enum wxbuildinfoformat {
    short_f, long_f };

wxString wxbuildinfo(wxbuildinfoformat format)
{
    wxString wxbuild(wxVERSION_STRING);

    if (format == long_f )
    {
#if defined(__WXMSW__)
        wxbuild << _T("-Windows");
#elif defined(__UNIX__)
        wxbuild << _T("-Linux");
#endif

#if wxUSE_UNICODE
        wxbuild << _T("-Unicode build");
#else
        wxbuild << _T("-ANSI build");
#endif // wxUSE_UNICODE
    }

    return wxbuild;
}

//(*IdInit(netchatserverFrame)
const long netchatserverFrame::ID_BUTTON2 = wxNewId();
const long netchatserverFrame::ID_TEXTCTRL1 = wxNewId();
const long netchatserverFrame::ID_TEXTCTRL2 = wxNewId();
const long netchatserverFrame::ID_CHECKBOX1 = wxNewId();
const long netchatserverFrame::ID_TEXTCTRL3 = wxNewId();
const long netchatserverFrame::ID_PANEL1 = wxNewId();
const long netchatserverFrame::ID_MENUITEM1 = wxNewId();
const long netchatserverFrame::idMenuAbout = wxNewId();
const long netchatserverFrame::ID_STATUSBAR1 = wxNewId();
const long netchatserverFrame::ID_TIMER1 = wxNewId();
//*)

const long netchatserverFrame::ID_SOCKET = wxNewId();
const long netchatserverFrame::ID_SERVER = wxNewId();

BEGIN_EVENT_TABLE(netchatserverFrame,wxFrame)
    //(*EventTable(netchatserverFrame)
    //*)
    //EVT_SOCKET(ID_SERVER, netchatserverFrame::OnServerEvent)
    //EVT_SOCKET(ID_SOCKET, netchatserverFrame::OnSocketEvent)
END_EVENT_TABLE()

netchatserverFrame::netchatserverFrame(wxWindow* parent,wxWindowID id)
{
    //(*Initialize(netchatserverFrame)
    wxBoxSizer* BoxSizer4;
    wxMenuItem* MenuItem2;
    wxMenuItem* MenuItem1;
    wxBoxSizer* BoxSizer2;
    wxMenu* Menu1;
    wxGridSizer* GridSizer1;
    wxGridSizer* GridSizer3;
    wxBoxSizer* BoxSizer1;
    wxMenuBar* MenuBar1;
    wxStaticBoxSizer* StaticBoxSizer1;
    wxBoxSizer* BoxSizer3;
    wxMenu* Menu2;

    Create(parent, wxID_ANY, _("ICQQ SERVER"), wxDefaultPosition, wxDefaultSize, wxDEFAULT_FRAME_STYLE, _T("wxID_ANY"));
    SetClientSize(wxSize(400,600));
    SetMinSize(wxSize(400,400));
    BoxSizer1 = new wxBoxSizer(wxVERTICAL);
    Panel1 = new wxPanel(this, ID_PANEL1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL, _T("ID_PANEL1"));
    BoxSizer2 = new wxBoxSizer(wxVERTICAL);
    StaticBoxSizer1 = new wxStaticBoxSizer(wxHORIZONTAL, Panel1, _("Label"));
    Button2 = new wxButton(Panel1, ID_BUTTON2, _("SERVER START"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON2"));
    StaticBoxSizer1->Add(Button2, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    BoxSizer2->Add(StaticBoxSizer1, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    GridSizer1 = new wxGridSizer(0, 1, 0, 0);
    TextCtrl1 = new wxTextCtrl(Panel1, ID_TEXTCTRL1, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE, wxDefaultValidator, _T("ID_TEXTCTRL1"));
    GridSizer1->Add(TextCtrl1, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    BoxSizer2->Add(GridSizer1, 2, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    BoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    BoxSizer4 = new wxBoxSizer(wxVERTICAL);
    TextCtrl2 = new wxTextCtrl(Panel1, ID_TEXTCTRL2, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER|wxTE_MULTILINE|wxHSCROLL, wxDefaultValidator, _T("ID_TEXTCTRL2"));
    BoxSizer4->Add(TextCtrl2, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    BoxSizer3->Add(BoxSizer4, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    GridSizer3 = new wxGridSizer(0, 1, 0, 0);
    CheckBox1 = new wxCheckBox(Panel1, ID_CHECKBOX1, _("推播"), wxDefaultPosition, wxSize(56,22), 0, wxDefaultValidator, _T("ID_CHECKBOX1"));
    CheckBox1->SetValue(false);
    GridSizer3->Add(CheckBox1, 0, wxALL|wxEXPAND|wxALIGN_LEFT|wxALIGN_TOP, 5);
    TextCtrl3 = new wxTextCtrl(Panel1, ID_TEXTCTRL3, _("10"), wxDefaultPosition, wxSize(43,22), 0, wxDefaultValidator, _T("ID_TEXTCTRL3"));
    GridSizer3->Add(TextCtrl3, 0, wxALL|wxALIGN_LEFT|wxALIGN_TOP, 5);
    BoxSizer3->Add(GridSizer3, 0, wxALL|wxALIGN_LEFT|wxALIGN_TOP, 5);
    BoxSizer2->Add(BoxSizer3, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    Panel1->SetSizer(BoxSizer2);
    BoxSizer2->Fit(Panel1);
    BoxSizer2->SetSizeHints(Panel1);
    BoxSizer1->Add(Panel1, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    SetSizer(BoxSizer1);
    MenuBar1 = new wxMenuBar();
    Menu1 = new wxMenu();
    MenuItem1 = new wxMenuItem(Menu1, ID_MENUITEM1, _("Quit\tAlt-F4"), _("Quit the application"), wxITEM_NORMAL);
    Menu1->Append(MenuItem1);
    MenuBar1->Append(Menu1, _("&File"));
    Menu2 = new wxMenu();
    MenuItem2 = new wxMenuItem(Menu2, idMenuAbout, _("About\tF1"), _("Show info about this application"), wxITEM_NORMAL);
    Menu2->Append(MenuItem2);
    MenuBar1->Append(Menu2, _("Help"));
    SetMenuBar(MenuBar1);
    StatusBar1 = new wxStatusBar(this, ID_STATUSBAR1, 0, _T("ID_STATUSBAR1"));
    int __wxStatusBarWidths_1[2] = { -1, -10 };
    int __wxStatusBarStyles_1[2] = { wxSB_NORMAL, wxSB_NORMAL };
    StatusBar1->SetFieldsCount(2,__wxStatusBarWidths_1);
    StatusBar1->SetStatusStyles(2,__wxStatusBarStyles_1);
    SetStatusBar(StatusBar1);
    Timer1.SetOwner(this, ID_TIMER1);
    SetSizer(BoxSizer1);
    Layout();

    Connect(ID_BUTTON2,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&netchatserverFrame::OnButton2Click);
    Connect(ID_CHECKBOX1,wxEVT_COMMAND_CHECKBOX_CLICKED,(wxObjectEventFunction)&netchatserverFrame::OnCheckBox1Click);
    Connect(ID_MENUITEM1,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&netchatserverFrame::OnQuit);
    Connect(idMenuAbout,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&netchatserverFrame::OnAbout);
    Connect(ID_TIMER1,wxEVT_TIMER,(wxObjectEventFunction)&netchatserverFrame::OnTimer1Trigger);
    //*)
    Connect( ID_SERVER, wxEVT_SOCKET, (wxObjectEventFunction)&netchatserverFrame::OnServerEvent );
    Connect( ID_SOCKET, wxEVT_SOCKET, (wxObjectEventFunction)&netchatserverFrame::OnSocketEvent );

    m_numClients = 0;
    UpdateStatusBar();
    m_ver = 20130912;
}

netchatserverFrame::~netchatserverFrame()
{
    //(*Destroy(netchatserverFrame)
    //*)
    delete m_server;
}

void netchatserverFrame::OnQuit(wxCommandEvent& event)
{
    Close();
}

void netchatserverFrame::OnAbout(wxCommandEvent& event)
{
    wxString msg = wxbuildinfo(long_f);
    wxMessageBox(msg, _("Welcome to..."));
}


void netchatserverFrame::OnButton2Click(wxCommandEvent& event)
{
	wxIPV4address addr;
	addr.Service(3000);

	m_server = new wxSocketServer(addr);

	if ( !m_server->Ok() ) {
		return;
	}

	m_server->SetEventHandler(*this, ID_SERVER);
	m_server->SetNotify(wxSOCKET_CONNECTION_FLAG);
	m_server->Notify(true);
	Button2->Enable(false);
}

void netchatserverFrame::OnServerEvent(wxSocketEvent& event)
{
	wxSocketBase* sock = m_server->Accept(false);
	switch ( event.GetSocketEvent() )
	{
		case wxSOCKET_CONNECTION:
		{
			(*TextCtrl1) << _("new connection") << _("\n");
			break;
		}
		default: break;
	}
	m_SockArray.Add(sock);
	m_UserArray.Add(wxString(_("dummy")));
//	wxString dd;
//	dd.Printf( _("%d"), event.GetId() );
//	wxMessageBox(dd);
	sock->SetEventHandler(*this, ID_SOCKET);
	sock->SetNotify(wxSOCKET_INPUT_FLAG|wxSOCKET_LOST_FLAG);
	sock->Notify(true);

	MsgPackage msgpkg_tmp;
	if ( m_numClients )
		msgpkg_tmp.set_m_nindex(m_numClients);		//pass the index of sock & user array to client.
	msgpkg_tmp.set_m_nsock_id( (uintptr_t)sock );	//pass sock ID to client.
	msgpkg_tmp.set_m_login_stage(1);				//pass login stage 1 to client.
	SendPackage( sock, &msgpkg_tmp );				//send package.
	m_numClients++;
	UpdateStatusBar();
}


void netchatserverFrame::OnSocketEvent(wxSocketEvent& event)
{
	//get current incoming sock;
	wxSocketBase* sock =  event.GetSocket();

	switch ( event.GetSocketEvent() )
	{
		case wxSOCKET_INPUT:
			break;
		case wxSOCKET_LOST:
			(*TextCtrl1) << _("client disconnected.") << _("\n");
			break;
		default:
			break;
	}

	switch ( event.GetSocketEvent() )
	{
		case wxSOCKET_INPUT:
		{
			//讀取封包
			MsgPackage package_r = ReadPackage( sock );
			package_s = package_r;	//接收封包副本
			switch ( package_r.handle() ) {
				case 0x00: //登入階段時封包處理
					switch ( package_r.m_login_stage() )
					{
						case 0:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							break;
						case 1:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							break;
						case 2:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							package_s.clear_m_spassword();	//清除封包密碼
							if ( package_r.ver() != m_ver ) {
								package_s.set_m_err_code(0x99);
								package_s.clear_m_login_stage();
								package_s.set_msg("此版本已經 out of fashion, 請更新(ICQQ.exe)版本再來吧");
								SendPackage(sock,&package_s);
								break;
							}
							else {
								//if ( m_SockArray.Index(sock) == package_r.m_nindex() ) {	//sock index與client封包所記錄的index是否相同
								if ( 1 ) {
									if ( m_UserArray.Item(m_SockArray.Index(sock)) == _("dummy") ) {	//確認是不是dummy封包
										if ( m_UserArray.Index( StringTowxString( package_r.m_susername() ) ) == wxNOT_FOUND ) {
											wxString* tmpstr = &m_UserArray[m_SockArray.Index(sock)];
											tmpstr->assign(StringTowxString(package_r.m_susername()));
											(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": dummy → ") << m_UserArray.Item(m_SockArray.Index(sock)) << _("\n");
											package_s.set_m_login_flag(true);	//設定登入狀態(成功)
											package_s.set_m_login_stage(3);	//設定login stage = 3
											/**
											傳送設定 m_login_flag
											傳送設定 m_login_stage
											*/
											SendPackage(sock,&package_s);
											//由封包的sock id紀錄轉換回去winsocketbase指標類型
											//wxSocketBase* sock_tmp = (wxSocketBase*)(volatile uintptr_t)package_r.m_nsock_id();
											//SendPackage(sock_tmp,&package_s);
										}
										else {
											package_s.set_m_err_code(0x01);
											SendPackage(sock,&package_s);
										}
									}
									else {
										(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": 名稱不是dummy, = ") + m_UserArray.Item(m_SockArray.Index(sock)) << _("\n");
									}
								}
								else {
									(*TextCtrl1) << _("有人離席囉...") << _("\n");
								}
							}
							break;
						case 3:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							break;
						case 4:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							if ( package_r.m_update_user_flag() ) {
								//package_s.set_handle(0x69);	//設定handle = 0x69
								package_s.set_m_login_stage(5);	//設定login stage = 5
								package_s.clear_m_user_list();	//使用者列表設定前先清除
								for ( unsigned int i = 0; i < m_UserArray.Count(); i++ ) {
									package_s.add_m_user_list( wxStringToString( m_UserArray.Item(i) ) );
								}
								/**
								傳送設定 handle
								傳送設定 m_login_stage
								傳送使用者列表 user list
								*/
								SendPackage(sock,&package_s);

								MsgPackage serverpgk;
								serverpgk.set_m_susername("server_admin");
								serverpgk.set_m_login_flag(true);
								serverpgk.set_m_login_stage(6);
								serverpgk.add_m_user_list( package_r.m_susername() );
								serverpgk.set_handle( 0x31 );
								//size_t self = m_SockArray.Index(sock);
								for ( ArrayOfSock::iterator it = m_SockArray.begin(); it != m_SockArray.end(); ++it ) {
									if ( *it != sock ) {
										SendPackage(*it,&serverpgk);
									}
								}
							}
							else {
								(*TextCtrl1) << _("為什麼不要求傳送使用者名單?") << _("\n");
							}
							break;
						case 5:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							break;
						case 6:
							(*TextCtrl1) << StringTowxString(package_r.m_susername()) + _(": login stage = ") << package_r.m_login_stage() << _("\n");
							break;
						default:
							break;
					}
					break;
				case 0x69: //已登入時封包處理
					(*TextCtrl1) << StringTowxString( package_r.m_susername() ) + _(": ") << StringTowxString( package_r.msg() ) << _("\n");
					package_s.clear_m_starget_user();
					for ( int i = 0; i < package_r.m_starget_user_size(); i++ ) {
						wxString str_tmp = StringTowxString( package_r.m_starget_user(i) );
						size_t idx_t = m_UserArray.Index( str_tmp.c_str() );
						SendPackage( m_SockArray.Item(idx_t) ,&package_s);
					}
					//SendPackage(sock,&package_s);
					break;
				default:
					break;
			}
			break;
		}
		case wxSOCKET_OUTPUT:
			break;
		case wxSOCKET_CONNECTION:
			break;
		case wxSOCKET_LOST:
		{
			int idx = m_SockArray.Index(sock);
			MsgPackage serverpgk;
			serverpgk.set_m_susername("server_admin");
			serverpgk.set_m_login_flag(true);
			serverpgk.set_m_login_stage(6);
			serverpgk.add_m_user_list( wxStringToString( m_UserArray.Item(idx) ) );
			serverpgk.set_handle( 0x13 );
			for ( ArrayOfSock::iterator it = m_SockArray.begin(); it != m_SockArray.end(); ++it ) {
				if ( *it != sock ) {
					SendPackage(*it,&serverpgk);
				}
			}
			m_SockArray.Remove(sock);
			m_UserArray.RemoveAt(idx);
			m_numClients--;
			sock->Destroy();
			break;
		}
		default:;
	}
	UpdateStatusBar();
}

void netchatserverFrame::UpdateStatusBar()
{
	wxString s;
	s.Printf(_("%d clients connected"), m_numClients);
	SetStatusText(s, 1);
}

void netchatserverFrame::SendPackage(wxSocketBase* sock, MsgPackage* package_tmp)
{
	std::string sbuffer;
	package_tmp->SerializeToString( &sbuffer );
	sock->Write( sbuffer.c_str(), package_tmp->ByteSize() );
}

MsgPackage netchatserverFrame::ReadPackage(wxSocketBase* sock)
{
	unsigned char buf[4096] = {0};
	sock->Read(buf, sizeof(buf));
	std::string myread((const char*)buf);
	MsgPackage package_tmp;
	package_tmp.ParseFromString(myread);
	return package_tmp;
}

std::string netchatserverFrame::wxStringToString(const wxString& s)
{
	std::string str_tmp = std::string( s.mb_str(wxConvUTF8) );
	return str_tmp;
}

wxString netchatserverFrame::StringTowxString(const std::string& s)
{
	wxString wxstr_tmp = wxString::FromUTF8( s.c_str() );
	return wxstr_tmp;
}



void netchatserverFrame::OnCheckBox1Click(wxCommandEvent& event)
{
	if ( CheckBox1->IsChecked() ) {
		TextCtrl3->Enable(false);
		if ( !Timer1.IsRunning() )
			m_linemsg_idx = 0;
			long temp_t = 0;
			TextCtrl3->GetValue().ToLong(&temp_t);
			Timer1.Start(temp_t*60*1000);
	}
	else {
		TextCtrl3->Enable(true);
		if ( Timer1.IsRunning() )
			Timer1.Stop();
	}
}

void netchatserverFrame::OnTimer1Trigger(wxTimerEvent& event)
{
	MsgPackage serverpgk;
	serverpgk.set_m_susername("server_admin");
	serverpgk.set_m_login_flag(true);
	serverpgk.set_m_login_stage(6);
	serverpgk.set_handle( 0x16 );

	if ( !TextCtrl2->IsEmpty() ) {
		if ( m_linemsg_idx < TextCtrl2->GetNumberOfLines() ) {
			serverpgk.set_msg( wxStringToString( TextCtrl2->GetLineText(m_linemsg_idx) ) );
			int userindex = 0;
			for ( wxArrayString::iterator it = m_UserArray.begin(); it != m_UserArray.end(); ++it ) {
				if ( *it != _("dummy") ) {
					SendPackage(m_SockArray.Item((size_t)userindex),&serverpgk);
				}
				userindex++;
			}
			TextCtrl1->WriteText( TextCtrl2->GetLineText(m_linemsg_idx) );
			TextCtrl1->WriteText( _("\n") );
			m_linemsg_idx++;
			if ( m_linemsg_idx == TextCtrl2->GetNumberOfLines() ) m_linemsg_idx = 0;
		}
		else {
			m_linemsg_idx = 0;
		}
	}
}
